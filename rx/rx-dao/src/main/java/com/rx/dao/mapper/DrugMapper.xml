<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rx.dao.DrugMapper">
  <resultMap id="BaseResultMap" type="com.rx.entity.Drug">
    <!--
      WARNING - @mbggenerated
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="wareid" jdbcType="VARCHAR" property="wareid" />
    <result column="barcode" jdbcType="VARCHAR" property="barcode" />
    <result column="abc" jdbcType="VARCHAR" property="abc" />
    <result column="warename" jdbcType="VARCHAR" property="warename" />
    <result column="waresimname" jdbcType="VARCHAR" property="waresimname" />
    <result column="warespec" jdbcType="VARCHAR" property="warespec" />
    <result column="prod_addr" jdbcType="VARCHAR" property="prodAddr" />
    <result column="producer" jdbcType="VARCHAR" property="producer" />
    <result column="wareunit" jdbcType="VARCHAR" property="wareunit" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="saleprice" jdbcType="DECIMAL" property="saleprice" />
    <result column="inventory" jdbcType="INTEGER" property="inventory" />
    <result column="jl" jdbcType="VARCHAR" property="jl" />
    <result column="lc" jdbcType="VARCHAR" property="lc" />
    <result column="pc" jdbcType="VARCHAR" property="pc" />
    <result column="yfyl" jdbcType="VARCHAR" property="yfyl" />
    <result column="xuanx" jdbcType="DECIMAL" property="xuanx" />
    <result column="saleminspec" jdbcType="VARCHAR" property="saleminspec" />
    <result column="saleminunit" jdbcType="VARCHAR" property="saleminunit" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
    -->
    id, wareid, barcode, abc, warename, waresimname, warespec, prod_addr, producer, wareunit, 
    status, saleprice, inventory, jl, lc, pc, yfyl, xuanx, saleminspec, saleminunit
  </sql>
  
  <select id="getDrugByAbc" resultType="map">
  	
		SELECT 
			d.* 
		FROM 
			drug as d		 
		WHERE 
			d.status=1 AND
			d.abc LIKE CONCAT('%',#{abc},'%')
		
  </select>
  <!-- 
  	删除表数据
  	truncate是整体删除（速度较快）， delete是逐条删除（速度较慢）。
	truncate不写服务器log，delete写服务器log，也就是truncate效率比delete高的原因。
	truncate不激活trigger(触发器)，但是会重置Identity（标识列、自增字段），相当于自增列会被置为初始值，又重新从1开始记录，而不是接着原来的ID数。而delete删除以后，Identity依旧是接着被删除的最近的那一条记录ID加1后进行记录。
  	 -->
  <delete id="deleteAll">
  	DELETE FROM drug;
  </delete>
  <!-- 
  	删除表数据
  	truncate是整体删除（速度较快）， delete是逐条删除（速度较慢）。
	truncate不写服务器log，delete写服务器log，也就是truncate效率比delete高的原因。
	truncate不激活trigger(触发器)，但是会重置Identity（标识列、自增字段），相当于自增列会被置为初始值，又重新从1开始记录，而不是接着原来的ID数。而delete删除以后，Identity依旧是接着被删除的最近的那一条记录ID加1后进行记录。
  	 -->
  <delete id="truncateAll">
  	TRUNCATE drug;
  </delete>
  
</mapper>